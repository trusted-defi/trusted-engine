syntax = "proto3";

package trusted.v1;

import "google/protobuf/empty.proto";
//import "google/protobuf/timestamp.proto";
//import "google/protobuf/any.proto";
import "trusted/v1/request_response.proto";



service TrustedService {
//    rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse) {}
//    rpc AddTx(AddTxRequest) returns (AddTxResponse) {}
//    rpc Status(StatusRequest) returns (StatusResponse) {}
//    rpc Reset(ResetRequest) returns (ResetResponse) {}
//    rpc Pending(PendingRequest) returns (PendingResponse) {}
    rpc ServiceReady(google.protobuf.Empty) returns (ServiceReadyResponse) {}
    rpc PoolSetPrice(SetPriceRequest) returns (google.protobuf.Empty) {}
    rpc PoolGasPrice(google.protobuf.Empty) returns (GasPriceResponse) {}
    rpc PendingNonce(PendingNonceRequest) returns (PendingNonceResponse) {}
    rpc PoolStat(google.protobuf.Empty) returns (PoolStatResponse) {}
    rpc PoolContent(PoolContentRequest) returns (PoolContentResponse) {}
    rpc PoolContentFrom(PoolContentRequest) returns (PoolContentResponse) {}
    rpc PoolPending(google.protobuf.Empty) returns (PoolPendingResponse) {}
    rpc PoolLocals(google.protobuf.Empty) returns (PoolLocalsResponse) {}
    rpc AddLocalsTx(AddTxsRequest) returns (AddTxsResponse) {}
    rpc AddRemoteTx(AddTxsRequest) returns (AddTxsResponse) {}
    rpc TxStatus(TxStatusRequest) returns (TxStatusResponse) {}
    rpc TxGet(TxGetRequest) returns (TxGetResponse) {}
    rpc TxHas(TxHasRequest) returns (TxHasResponse) {}
    rpc SubscribeNewTransaction(SubscribeNewTxRequest) returns (stream SubscribeNewTxResponse) {}


    rpc Crypt(CryptRequest) returns (CryptResponse) {}
    rpc AddLocalTrustedTxs(AddTrustedTxsRequest) returns (AddTrustedTxsResponse) {}
    rpc AddRemoteTrustedTxs(AddTrustedTxsRequest) returns (AddTrustedTxsResponse) {}

    rpc FillBlock(FillBlockRequest) returns (FillBlockResponse) {}
}


service ChainService {
    rpc ServiceReady(google.protobuf.Empty) returns (ServiceReadyResponse) {}
    rpc GetBlock(BlockRequest) returns (BlockResponse) {}
    rpc GetBalance(BalanceRequest) returns (BalanceResponse) {}
    rpc GetNonce(NonceRequest) returns (NonceResponse) {}
    rpc CurrentBlock(CurrentBlockRequest) returns (CurrentBlockResponse) {}
    rpc LatestHeader(LatestHeaderRequest) returns (LatestHeaderResponse) {}
    rpc ChainHeadEvent(ChainHeadEventRequest) returns (stream ChainHeadEventResponse) {}
}